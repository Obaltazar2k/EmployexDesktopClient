/* 
 * Employex
 *
 * This is a sample API that allows to manage Employex system, which serves for users seeking to apply for job offers. 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: ricardorzan@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Employex.Client;
using Employex.Model;

namespace Employex.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IAplicationsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Adds an aplication to a specified job offer
        /// </summary>
        /// <remarks>
        /// Adds an aplication to a specified job offer
        /// </remarks>
        /// <exception cref="Employex.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Unique identifier of the user</param>
        /// <param name="jobOfferId">Unique identifier of the job offer</param>
        /// <returns></returns>
        void AddAplicationToJobOffer (int? userId, int? jobOfferId);

        /// <summary>
        /// Adds an aplication to a specified job offer
        /// </summary>
        /// <remarks>
        /// Adds an aplication to a specified job offer
        /// </remarks>
        /// <exception cref="Employex.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Unique identifier of the user</param>
        /// <param name="jobOfferId">Unique identifier of the job offer</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddAplicationToJobOfferWithHttpInfo (int? userId, int? jobOfferId);
        /// <summary>
        /// Returns a list of aplications in a specified job offer published by the user
        /// </summary>
        /// <remarks>
        /// A list of aplications in the job offer specified published by the user
        /// </remarks>
        /// <exception cref="Employex.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Unique identifier of the user</param>
        /// <param name="jobOfferId">Unique identifier of the job offer</param>
        /// <returns>List&lt;Aplication&gt;</returns>
        List<Aplication> GetJobOffersAplications (int? userId, int? jobOfferId);

        /// <summary>
        /// Returns a list of aplications in a specified job offer published by the user
        /// </summary>
        /// <remarks>
        /// A list of aplications in the job offer specified published by the user
        /// </remarks>
        /// <exception cref="Employex.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Unique identifier of the user</param>
        /// <param name="jobOfferId">Unique identifier of the job offer</param>
        /// <returns>ApiResponse of List&lt;Aplication&gt;</returns>
        ApiResponse<List<Aplication>> GetJobOffersAplicationsWithHttpInfo (int? userId, int? jobOfferId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Adds an aplication to a specified job offer
        /// </summary>
        /// <remarks>
        /// Adds an aplication to a specified job offer
        /// </remarks>
        /// <exception cref="Employex.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Unique identifier of the user</param>
        /// <param name="jobOfferId">Unique identifier of the job offer</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddAplicationToJobOfferAsync (int? userId, int? jobOfferId);

        /// <summary>
        /// Adds an aplication to a specified job offer
        /// </summary>
        /// <remarks>
        /// Adds an aplication to a specified job offer
        /// </remarks>
        /// <exception cref="Employex.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Unique identifier of the user</param>
        /// <param name="jobOfferId">Unique identifier of the job offer</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddAplicationToJobOfferAsyncWithHttpInfo (int? userId, int? jobOfferId);
        /// <summary>
        /// Returns a list of aplications in a specified job offer published by the user
        /// </summary>
        /// <remarks>
        /// A list of aplications in the job offer specified published by the user
        /// </remarks>
        /// <exception cref="Employex.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Unique identifier of the user</param>
        /// <param name="jobOfferId">Unique identifier of the job offer</param>
        /// <returns>Task of List&lt;Aplication&gt;</returns>
        System.Threading.Tasks.Task<List<Aplication>> GetJobOffersAplicationsAsync (int? userId, int? jobOfferId);

        /// <summary>
        /// Returns a list of aplications in a specified job offer published by the user
        /// </summary>
        /// <remarks>
        /// A list of aplications in the job offer specified published by the user
        /// </remarks>
        /// <exception cref="Employex.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Unique identifier of the user</param>
        /// <param name="jobOfferId">Unique identifier of the job offer</param>
        /// <returns>Task of ApiResponse (List&lt;Aplication&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Aplication>>> GetJobOffersAplicationsAsyncWithHttpInfo (int? userId, int? jobOfferId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class AplicationsApi : IAplicationsApi
    {
        private Employex.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AplicationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AplicationsApi(String basePath)
        {
            this.Configuration = new Employex.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Employex.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AplicationsApi"/> class
        /// </summary>
        /// <returns></returns>
        public AplicationsApi()
        {
            this.Configuration = Employex.Client.Configuration.Default;

            ExceptionFactory = Employex.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AplicationsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AplicationsApi(Employex.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Employex.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Employex.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Employex.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Employex.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Adds an aplication to a specified job offer Adds an aplication to a specified job offer
        /// </summary>
        /// <exception cref="Employex.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Unique identifier of the user</param>
        /// <param name="jobOfferId">Unique identifier of the job offer</param>
        /// <returns></returns>
        public void AddAplicationToJobOffer (int? userId, int? jobOfferId)
        {
             AddAplicationToJobOfferWithHttpInfo(userId, jobOfferId);
        }

        /// <summary>
        /// Adds an aplication to a specified job offer Adds an aplication to a specified job offer
        /// </summary>
        /// <exception cref="Employex.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Unique identifier of the user</param>
        /// <param name="jobOfferId">Unique identifier of the job offer</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddAplicationToJobOfferWithHttpInfo (int? userId, int? jobOfferId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling AplicationsApi->AddAplicationToJobOffer");
            // verify the required parameter 'jobOfferId' is set
            if (jobOfferId == null)
                throw new ApiException(400, "Missing required parameter 'jobOfferId' when calling AplicationsApi->AddAplicationToJobOffer");

            var localVarPath = "/users/{user_id}/job_offers/{job_offer_id}/aplications";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("user_id", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (jobOfferId != null) localVarPathParams.Add("job_offer_id", this.Configuration.ApiClient.ParameterToString(jobOfferId)); // path parameter
            // authentication (oAuthSample) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddAplicationToJobOffer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Adds an aplication to a specified job offer Adds an aplication to a specified job offer
        /// </summary>
        /// <exception cref="Employex.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Unique identifier of the user</param>
        /// <param name="jobOfferId">Unique identifier of the job offer</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddAplicationToJobOfferAsync (int? userId, int? jobOfferId)
        {
             await AddAplicationToJobOfferAsyncWithHttpInfo(userId, jobOfferId);

        }

        /// <summary>
        /// Adds an aplication to a specified job offer Adds an aplication to a specified job offer
        /// </summary>
        /// <exception cref="Employex.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Unique identifier of the user</param>
        /// <param name="jobOfferId">Unique identifier of the job offer</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddAplicationToJobOfferAsyncWithHttpInfo (int? userId, int? jobOfferId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling AplicationsApi->AddAplicationToJobOffer");
            // verify the required parameter 'jobOfferId' is set
            if (jobOfferId == null)
                throw new ApiException(400, "Missing required parameter 'jobOfferId' when calling AplicationsApi->AddAplicationToJobOffer");

            var localVarPath = "/users/{user_id}/job_offers/{job_offer_id}/aplications";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("user_id", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (jobOfferId != null) localVarPathParams.Add("job_offer_id", this.Configuration.ApiClient.ParameterToString(jobOfferId)); // path parameter
            // authentication (oAuthSample) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddAplicationToJobOffer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Returns a list of aplications in a specified job offer published by the user A list of aplications in the job offer specified published by the user
        /// </summary>
        /// <exception cref="Employex.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Unique identifier of the user</param>
        /// <param name="jobOfferId">Unique identifier of the job offer</param>
        /// <returns>List&lt;Aplication&gt;</returns>
        public List<Aplication> GetJobOffersAplications (int? userId, int? jobOfferId)
        {
             ApiResponse<List<Aplication>> localVarResponse = GetJobOffersAplicationsWithHttpInfo(userId, jobOfferId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of aplications in a specified job offer published by the user A list of aplications in the job offer specified published by the user
        /// </summary>
        /// <exception cref="Employex.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Unique identifier of the user</param>
        /// <param name="jobOfferId">Unique identifier of the job offer</param>
        /// <returns>ApiResponse of List&lt;Aplication&gt;</returns>
        public ApiResponse< List<Aplication> > GetJobOffersAplicationsWithHttpInfo (int? userId, int? jobOfferId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling AplicationsApi->GetJobOffersAplications");
            // verify the required parameter 'jobOfferId' is set
            if (jobOfferId == null)
                throw new ApiException(400, "Missing required parameter 'jobOfferId' when calling AplicationsApi->GetJobOffersAplications");

            var localVarPath = "/users/{user_id}/job_offer/{job_offer_id}/aplications";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("user_id", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (jobOfferId != null) localVarPathParams.Add("job_offer_id", this.Configuration.ApiClient.ParameterToString(jobOfferId)); // path parameter
            // authentication (oAuthSample) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetJobOffersAplications", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Aplication>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Aplication>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Aplication>)));
        }

        /// <summary>
        /// Returns a list of aplications in a specified job offer published by the user A list of aplications in the job offer specified published by the user
        /// </summary>
        /// <exception cref="Employex.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Unique identifier of the user</param>
        /// <param name="jobOfferId">Unique identifier of the job offer</param>
        /// <returns>Task of List&lt;Aplication&gt;</returns>
        public async System.Threading.Tasks.Task<List<Aplication>> GetJobOffersAplicationsAsync (int? userId, int? jobOfferId)
        {
             ApiResponse<List<Aplication>> localVarResponse = await GetJobOffersAplicationsAsyncWithHttpInfo(userId, jobOfferId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns a list of aplications in a specified job offer published by the user A list of aplications in the job offer specified published by the user
        /// </summary>
        /// <exception cref="Employex.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Unique identifier of the user</param>
        /// <param name="jobOfferId">Unique identifier of the job offer</param>
        /// <returns>Task of ApiResponse (List&lt;Aplication&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Aplication>>> GetJobOffersAplicationsAsyncWithHttpInfo (int? userId, int? jobOfferId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling AplicationsApi->GetJobOffersAplications");
            // verify the required parameter 'jobOfferId' is set
            if (jobOfferId == null)
                throw new ApiException(400, "Missing required parameter 'jobOfferId' when calling AplicationsApi->GetJobOffersAplications");

            var localVarPath = "/users/{user_id}/job_offer/{job_offer_id}/aplications";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("user_id", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (jobOfferId != null) localVarPathParams.Add("job_offer_id", this.Configuration.ApiClient.ParameterToString(jobOfferId)); // path parameter
            // authentication (oAuthSample) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetJobOffersAplications", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Aplication>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Aplication>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Aplication>)));
        }

    }
}
