/* 
 * Employex
 *
 * This is a sample API that allows to manage Employex system, which serves for users seeking to apply for job offers. 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: ricardorzan@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Employex.Client.SwaggerDateConverter;

namespace Employex.Model
{
    /// <summary>
    /// Structure of a laboral experience object
    /// </summary>
    [DataContract]
        public partial class LaboralExperience :  IEquatable<LaboralExperience>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LaboralExperience" /> class.
        /// </summary>
        /// <param name="laboralExperienceId">Unique identifier of the laboral experience.</param>
        /// <param name="jobTitle">Job&#x27;s title (required).</param>
        /// <param name="currentJob">A flag to know if this laboral experience is the current job of the user (required) (default to false).</param>
        /// <param name="endDate">Date where the laboral experience finished.</param>
        /// <param name="startDate">Date where the laboral experience started.</param>
        /// <param name="companyName">Organization&#x27;s name.</param>
        /// <param name="sector">sector.</param>
        /// <param name="jobCategory">jobCategory.</param>
        /// <param name="location">Location where the work experience was lived.</param>
        public LaboralExperience(int laboralExperienceId = default(int), string jobTitle = default(string), bool? currentJob = false, DateTime? endDate = default(DateTime?), DateTime? startDate = default(DateTime?), string companyName = default(string), Sector sector = default(Sector), JobCategory jobCategory = default(JobCategory), string location = default(string))
        {
            // to ensure "jobTitle" is required (not null)
            if (jobTitle == null)
            {
                throw new InvalidDataException("jobTitle is a required property for LaboralExperience and cannot be null");
            }
            else
            {
                this.JobTitle = jobTitle;
            }
            // to ensure "currentJob" is required (not null)
            if (currentJob == null)
            {
                throw new InvalidDataException("currentJob is a required property for LaboralExperience and cannot be null");
            }
            else
            {
                this.CurrentJob = currentJob;
            }
            this.LaboralExperienceId = laboralExperienceId;
            this.EndDate = endDate;
            this.StartDate = startDate;
            this.CompanyName = companyName;
            this.Sector = sector;
            this.JobCategory = jobCategory;
            this.Location = location;
        }
        
        /// <summary>
        /// Unique identifier of the laboral experience
        /// </summary>
        /// <value>Unique identifier of the laboral experience</value>
        [DataMember(Name="laboral_experience_id", EmitDefaultValue=false)]
        public int LaboralExperienceId { get; set; }

        /// <summary>
        /// Job&#x27;s title
        /// </summary>
        /// <value>Job&#x27;s title</value>
        [DataMember(Name="job_title", EmitDefaultValue=false)]
        public string JobTitle { get; set; }

        /// <summary>
        /// A flag to know if this laboral experience is the current job of the user
        /// </summary>
        /// <value>A flag to know if this laboral experience is the current job of the user</value>
        [DataMember(Name="current_job", EmitDefaultValue=false)]
        public bool? CurrentJob { get; set; }

        /// <summary>
        /// Date where the laboral experience finished
        /// </summary>
        /// <value>Date where the laboral experience finished</value>
        [DataMember(Name="end_date", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// Date where the laboral experience started
        /// </summary>
        /// <value>Date where the laboral experience started</value>
        [DataMember(Name="start_date", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? StartDate { get; set; }

        /// <summary>
        /// Organization&#x27;s name
        /// </summary>
        /// <value>Organization&#x27;s name</value>
        [DataMember(Name="company_name", EmitDefaultValue=false)]
        public string CompanyName { get; set; }

        /// <summary>
        /// Gets or Sets Sector
        /// </summary>
        [DataMember(Name="sector", EmitDefaultValue=false)]
        public Sector Sector { get; set; }

        /// <summary>
        /// Gets or Sets JobCategory
        /// </summary>
        [DataMember(Name="job_category", EmitDefaultValue=false)]
        public JobCategory JobCategory { get; set; }

        /// <summary>
        /// Location where the work experience was lived
        /// </summary>
        /// <value>Location where the work experience was lived</value>
        [DataMember(Name="location", EmitDefaultValue=false)]
        public string Location { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LaboralExperience {\n");
            sb.Append("  LaboralExperienceId: ").Append(LaboralExperienceId).Append("\n");
            sb.Append("  JobTitle: ").Append(JobTitle).Append("\n");
            sb.Append("  CurrentJob: ").Append(CurrentJob).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  CompanyName: ").Append(CompanyName).Append("\n");
            sb.Append("  Sector: ").Append(Sector).Append("\n");
            sb.Append("  JobCategory: ").Append(JobCategory).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LaboralExperience);
        }

        /// <summary>
        /// Returns true if LaboralExperience instances are equal
        /// </summary>
        /// <param name="input">Instance of LaboralExperience to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LaboralExperience input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.LaboralExperienceId == input.LaboralExperienceId ||
                    (this.LaboralExperienceId != null &&
                    this.LaboralExperienceId.Equals(input.LaboralExperienceId))
                ) && 
                (
                    this.JobTitle == input.JobTitle ||
                    (this.JobTitle != null &&
                    this.JobTitle.Equals(input.JobTitle))
                ) && 
                (
                    this.CurrentJob == input.CurrentJob ||
                    (this.CurrentJob != null &&
                    this.CurrentJob.Equals(input.CurrentJob))
                ) && 
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != null &&
                    this.EndDate.Equals(input.EndDate))
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.CompanyName == input.CompanyName ||
                    (this.CompanyName != null &&
                    this.CompanyName.Equals(input.CompanyName))
                ) && 
                (
                    this.Sector == input.Sector ||
                    (this.Sector != null &&
                    this.Sector.Equals(input.Sector))
                ) && 
                (
                    this.JobCategory == input.JobCategory ||
                    (this.JobCategory != null &&
                    this.JobCategory.Equals(input.JobCategory))
                ) && 
                (
                    this.Location == input.Location ||
                    (this.Location != null &&
                    this.Location.Equals(input.Location))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LaboralExperienceId != null)
                    hashCode = hashCode * 59 + this.LaboralExperienceId.GetHashCode();
                if (this.JobTitle != null)
                    hashCode = hashCode * 59 + this.JobTitle.GetHashCode();
                if (this.CurrentJob != null)
                    hashCode = hashCode * 59 + this.CurrentJob.GetHashCode();
                if (this.EndDate != null)
                    hashCode = hashCode * 59 + this.EndDate.GetHashCode();
                if (this.StartDate != null)
                    hashCode = hashCode * 59 + this.StartDate.GetHashCode();
                if (this.CompanyName != null)
                    hashCode = hashCode * 59 + this.CompanyName.GetHashCode();
                if (this.Sector != null)
                    hashCode = hashCode * 59 + this.Sector.GetHashCode();
                if (this.JobCategory != null)
                    hashCode = hashCode * 59 + this.JobCategory.GetHashCode();
                if (this.Location != null)
                    hashCode = hashCode * 59 + this.Location.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
