/* 
 * Employex
 *
 * This is a sample API that allows to manage Employex system, which serves for users seeking to apply for job offers. 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: ricardorzan@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Employex.Client.SwaggerDateConverter;

namespace Employex.Model
{
    /// <summary>
    /// Main structure of a job offer
    /// </summary>
    [DataContract]
        public partial class JobOffer :  IEquatable<JobOffer>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="JobOffer" /> class.
        /// </summary>
        /// <param name="jobOfferId">Unique identifier of the job offer.</param>
        /// <param name="job">Title of the job (required).</param>
        /// <param name="description">Talk about what the job offer is about (required).</param>
        /// <param name="jobCategory">jobCategory.</param>
        /// <param name="location">Location where the job offer is.</param>
        /// <param name="media">Multimedia data related to the job offer.</param>
        public JobOffer(Guid? jobOfferId = default(Guid?), string job = default(string), string description = default(string), JobCategory jobCategory = default(JobCategory), string location = default(string), List<Media> media = default(List<Media>))
        {
            // to ensure "job" is required (not null)
            if (job == null)
            {
                throw new InvalidDataException("job is a required property for JobOffer and cannot be null");
            }
            else
            {
                this.Job = job;
            }
            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new InvalidDataException("description is a required property for JobOffer and cannot be null");
            }
            else
            {
                this.Description = description;
            }
            this.JobOfferId = jobOfferId;
            this.JobCategory = jobCategory;
            this.Location = location;
            this.Media = media;
        }
        
        /// <summary>
        /// Unique identifier of the job offer
        /// </summary>
        /// <value>Unique identifier of the job offer</value>
        [DataMember(Name="job_offer_id", EmitDefaultValue=false)]
        public Guid? JobOfferId { get; set; }

        /// <summary>
        /// Title of the job
        /// </summary>
        /// <value>Title of the job</value>
        [DataMember(Name="job", EmitDefaultValue=false)]
        public string Job { get; set; }

        /// <summary>
        /// Talk about what the job offer is about
        /// </summary>
        /// <value>Talk about what the job offer is about</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets JobCategory
        /// </summary>
        [DataMember(Name="job_category", EmitDefaultValue=false)]
        public JobCategory JobCategory { get; set; }

        /// <summary>
        /// Location where the job offer is
        /// </summary>
        /// <value>Location where the job offer is</value>
        [DataMember(Name="location", EmitDefaultValue=false)]
        public string Location { get; set; }

        /// <summary>
        /// Multimedia data related to the job offer
        /// </summary>
        /// <value>Multimedia data related to the job offer</value>
        [DataMember(Name="media", EmitDefaultValue=false)]
        public List<Media> Media { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JobOffer {\n");
            sb.Append("  JobOfferId: ").Append(JobOfferId).Append("\n");
            sb.Append("  Job: ").Append(Job).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  JobCategory: ").Append(JobCategory).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  Media: ").Append(Media).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as JobOffer);
        }

        /// <summary>
        /// Returns true if JobOffer instances are equal
        /// </summary>
        /// <param name="input">Instance of JobOffer to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JobOffer input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.JobOfferId == input.JobOfferId ||
                    (this.JobOfferId != null &&
                    this.JobOfferId.Equals(input.JobOfferId))
                ) && 
                (
                    this.Job == input.Job ||
                    (this.Job != null &&
                    this.Job.Equals(input.Job))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.JobCategory == input.JobCategory ||
                    (this.JobCategory != null &&
                    this.JobCategory.Equals(input.JobCategory))
                ) && 
                (
                    this.Location == input.Location ||
                    (this.Location != null &&
                    this.Location.Equals(input.Location))
                ) && 
                (
                    this.Media == input.Media ||
                    this.Media != null &&
                    input.Media != null &&
                    this.Media.SequenceEqual(input.Media)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.JobOfferId != null)
                    hashCode = hashCode * 59 + this.JobOfferId.GetHashCode();
                if (this.Job != null)
                    hashCode = hashCode * 59 + this.Job.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.JobCategory != null)
                    hashCode = hashCode * 59 + this.JobCategory.GetHashCode();
                if (this.Location != null)
                    hashCode = hashCode * 59 + this.Location.GetHashCode();
                if (this.Media != null)
                    hashCode = hashCode * 59 + this.Media.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
