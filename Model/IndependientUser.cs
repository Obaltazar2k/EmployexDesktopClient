/* 
 * Employex
 *
 * This is a sample API that allows to manage Employex system, which serves for users seeking to apply for job offers. 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: ricardorzan@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Employex.Client.SwaggerDateConverter;

namespace Employex.Model
{
    /// <summary>
    /// Main structure of a independent user
    /// </summary>
    [DataContract]
        public partial class IndependientUser :  IEquatable<IndependientUser>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IndependientUser" /> class.
        /// </summary>
        /// <param name="surnames">User&#x27; surnames.</param>
        /// <param name="name">User&#x27;s name (required).</param>
        /// <param name="ocupation">Actual job.</param>
        /// <param name="persoanlDescription">Short description of the user.</param>
        /// <param name="user">user.</param>
        /// <param name="education">Education registered by the user.</param>
        /// <param name="laboralExperience">Laboral experiences registered by the user.</param>
        /// <param name="certification">Certifications taken by the user.</param>
        /// <param name="section">Sections published by the user.</param>
        public IndependientUser(string surnames = default(string), string name = default(string), string ocupation = default(string), string persoanlDescription = default(string), User user = default(User), List<Education> education = default(List<Education>), List<LaboralExperience> laboralExperience = default(List<LaboralExperience>), List<Certification> certification = default(List<Certification>), List<Section> section = default(List<Section>))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for IndependientUser and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            this.Surnames = surnames;
            this.Ocupation = ocupation;
            this.PersoanlDescription = persoanlDescription;
            this.User = user;
            this.Education = education;
            this.LaboralExperience = laboralExperience;
            this.Certification = certification;
            this.Section = section;
        }
        
        /// <summary>
        /// User&#x27; surnames
        /// </summary>
        /// <value>User&#x27; surnames</value>
        [DataMember(Name="surnames", EmitDefaultValue=false)]
        public string Surnames { get; set; }

        /// <summary>
        /// User&#x27;s name
        /// </summary>
        /// <value>User&#x27;s name</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Actual job
        /// </summary>
        /// <value>Actual job</value>
        [DataMember(Name="ocupation", EmitDefaultValue=false)]
        public string Ocupation { get; set; }

        /// <summary>
        /// Short description of the user
        /// </summary>
        /// <value>Short description of the user</value>
        [DataMember(Name="persoanl_description", EmitDefaultValue=false)]
        public string PersoanlDescription { get; set; }

        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [DataMember(Name="user", EmitDefaultValue=false)]
        public User User { get; set; }

        /// <summary>
        /// Education registered by the user
        /// </summary>
        /// <value>Education registered by the user</value>
        [DataMember(Name="education", EmitDefaultValue=false)]
        public List<Education> Education { get; set; }

        /// <summary>
        /// Laboral experiences registered by the user
        /// </summary>
        /// <value>Laboral experiences registered by the user</value>
        [DataMember(Name="laboral_experience", EmitDefaultValue=false)]
        public List<LaboralExperience> LaboralExperience { get; set; }

        /// <summary>
        /// Certifications taken by the user
        /// </summary>
        /// <value>Certifications taken by the user</value>
        [DataMember(Name="certification", EmitDefaultValue=false)]
        public List<Certification> Certification { get; set; }

        /// <summary>
        /// Sections published by the user
        /// </summary>
        /// <value>Sections published by the user</value>
        [DataMember(Name="section", EmitDefaultValue=false)]
        public List<Section> Section { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IndependientUser {\n");
            sb.Append("  Surnames: ").Append(Surnames).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Ocupation: ").Append(Ocupation).Append("\n");
            sb.Append("  PersoanlDescription: ").Append(PersoanlDescription).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  Education: ").Append(Education).Append("\n");
            sb.Append("  LaboralExperience: ").Append(LaboralExperience).Append("\n");
            sb.Append("  Certification: ").Append(Certification).Append("\n");
            sb.Append("  Section: ").Append(Section).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IndependientUser);
        }

        /// <summary>
        /// Returns true if IndependientUser instances are equal
        /// </summary>
        /// <param name="input">Instance of IndependientUser to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IndependientUser input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Surnames == input.Surnames ||
                    (this.Surnames != null &&
                    this.Surnames.Equals(input.Surnames))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Ocupation == input.Ocupation ||
                    (this.Ocupation != null &&
                    this.Ocupation.Equals(input.Ocupation))
                ) && 
                (
                    this.PersoanlDescription == input.PersoanlDescription ||
                    (this.PersoanlDescription != null &&
                    this.PersoanlDescription.Equals(input.PersoanlDescription))
                ) && 
                (
                    this.User == input.User ||
                    (this.User != null &&
                    this.User.Equals(input.User))
                ) && 
                (
                    this.Education == input.Education ||
                    this.Education != null &&
                    input.Education != null &&
                    this.Education.SequenceEqual(input.Education)
                ) && 
                (
                    this.LaboralExperience == input.LaboralExperience ||
                    this.LaboralExperience != null &&
                    input.LaboralExperience != null &&
                    this.LaboralExperience.SequenceEqual(input.LaboralExperience)
                ) && 
                (
                    this.Certification == input.Certification ||
                    this.Certification != null &&
                    input.Certification != null &&
                    this.Certification.SequenceEqual(input.Certification)
                ) && 
                (
                    this.Section == input.Section ||
                    this.Section != null &&
                    input.Section != null &&
                    this.Section.SequenceEqual(input.Section)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Surnames != null)
                    hashCode = hashCode * 59 + this.Surnames.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Ocupation != null)
                    hashCode = hashCode * 59 + this.Ocupation.GetHashCode();
                if (this.PersoanlDescription != null)
                    hashCode = hashCode * 59 + this.PersoanlDescription.GetHashCode();
                if (this.User != null)
                    hashCode = hashCode * 59 + this.User.GetHashCode();
                if (this.Education != null)
                    hashCode = hashCode * 59 + this.Education.GetHashCode();
                if (this.LaboralExperience != null)
                    hashCode = hashCode * 59 + this.LaboralExperience.GetHashCode();
                if (this.Certification != null)
                    hashCode = hashCode * 59 + this.Certification.GetHashCode();
                if (this.Section != null)
                    hashCode = hashCode * 59 + this.Section.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
