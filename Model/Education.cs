/* 
 * Employex
 *
 * This is a sample API that allows to manage Employex system, which serves for users seeking to apply for job offers. 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: ricardorzan@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Employex.Client.SwaggerDateConverter;

namespace Employex.Model
{
    /// <summary>
    /// Main structure of a education object
    /// </summary>
    [DataContract]
        public partial class Education :  IEquatable<Education>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Education" /> class.
        /// </summary>
        /// <param name="educationId">Unique identifier of education.</param>
        /// <param name="description">Talk about what the education is about.</param>
        /// <param name="discipline">Education&#x27;s discipline.</param>
        /// <param name="endDate">Date where the education finished.</param>
        /// <param name="startDate">Date where the education started.</param>
        /// <param name="average">Average obtained upon completion of studies.</param>
        /// <param name="title">Title of studies taken (required).</param>
        /// <param name="university">University where the education was taken (required).</param>
        public Education(Guid? educationId = default(Guid?), string description = default(string), string discipline = default(string), DateTime? endDate = default(DateTime?), DateTime? startDate = default(DateTime?), float? average = default(float?), string title = default(string), string university = default(string))
        {
            // to ensure "title" is required (not null)
            if (title == null)
            {
                throw new InvalidDataException("title is a required property for Education and cannot be null");
            }
            else
            {
                this.Title = title;
            }
            // to ensure "university" is required (not null)
            if (university == null)
            {
                throw new InvalidDataException("university is a required property for Education and cannot be null");
            }
            else
            {
                this.University = university;
            }
            this.EducationId = educationId;
            this.Description = description;
            this.Discipline = discipline;
            this.EndDate = endDate;
            this.StartDate = startDate;
            this.Average = average;
        }
        
        /// <summary>
        /// Unique identifier of education
        /// </summary>
        /// <value>Unique identifier of education</value>
        [DataMember(Name="education_id", EmitDefaultValue=false)]
        public Guid? EducationId { get; set; }

        /// <summary>
        /// Talk about what the education is about
        /// </summary>
        /// <value>Talk about what the education is about</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Education&#x27;s discipline
        /// </summary>
        /// <value>Education&#x27;s discipline</value>
        [DataMember(Name="discipline", EmitDefaultValue=false)]
        public string Discipline { get; set; }

        /// <summary>
        /// Date where the education finished
        /// </summary>
        /// <value>Date where the education finished</value>
        [DataMember(Name="end_date", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// Date where the education started
        /// </summary>
        /// <value>Date where the education started</value>
        [DataMember(Name="start_date", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? StartDate { get; set; }

        /// <summary>
        /// Average obtained upon completion of studies
        /// </summary>
        /// <value>Average obtained upon completion of studies</value>
        [DataMember(Name="average", EmitDefaultValue=false)]
        public float? Average { get; set; }

        /// <summary>
        /// Title of studies taken
        /// </summary>
        /// <value>Title of studies taken</value>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// University where the education was taken
        /// </summary>
        /// <value>University where the education was taken</value>
        [DataMember(Name="university", EmitDefaultValue=false)]
        public string University { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Education {\n");
            sb.Append("  EducationId: ").Append(EducationId).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Discipline: ").Append(Discipline).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  Average: ").Append(Average).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  University: ").Append(University).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Education);
        }

        /// <summary>
        /// Returns true if Education instances are equal
        /// </summary>
        /// <param name="input">Instance of Education to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Education input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EducationId == input.EducationId ||
                    (this.EducationId != null &&
                    this.EducationId.Equals(input.EducationId))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Discipline == input.Discipline ||
                    (this.Discipline != null &&
                    this.Discipline.Equals(input.Discipline))
                ) && 
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != null &&
                    this.EndDate.Equals(input.EndDate))
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.Average == input.Average ||
                    (this.Average != null &&
                    this.Average.Equals(input.Average))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.University == input.University ||
                    (this.University != null &&
                    this.University.Equals(input.University))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EducationId != null)
                    hashCode = hashCode * 59 + this.EducationId.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Discipline != null)
                    hashCode = hashCode * 59 + this.Discipline.GetHashCode();
                if (this.EndDate != null)
                    hashCode = hashCode * 59 + this.EndDate.GetHashCode();
                if (this.StartDate != null)
                    hashCode = hashCode * 59 + this.StartDate.GetHashCode();
                if (this.Average != null)
                    hashCode = hashCode * 59 + this.Average.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.University != null)
                    hashCode = hashCode * 59 + this.University.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
