/* 
 * Employex
 *
 * This is a sample API that allows to manage Employex system, which serves for users seeking to apply for job offers. 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: ricardorzan@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Employex.Client.SwaggerDateConverter;

namespace Employex.Model
{
    /// <summary>
    /// Main structure of an organization user object
    /// </summary>
    [DataContract]
        public partial class OrganizationUser :  IEquatable<OrganizationUser>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrganizationUser" /> class.
        /// </summary>
        /// <param name="name">Organization&#x27;s name (required).</param>
        /// <param name="about">Organization overview.</param>
        /// <param name="zipCode">Zip code where the organization is located.</param>
        /// <param name="contactName">Contact person&#x27;s name.</param>
        /// <param name="contactPhone">Contact person&#x27;s phone.</param>
        /// <param name="contactEmail">Contact person&#x27;s email (required).</param>
        /// <param name="webSite">Organization&#x27;s web site.</param>
        /// <param name="workSector">workSector.</param>
        /// <param name="user">user.</param>
        public OrganizationUser(string name = default(string), string about = default(string), long? zipCode = default(long?), string contactName = default(string), string contactPhone = default(string), string contactEmail = default(string), string webSite = default(string), Sector workSector = default(Sector), User user = default(User))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for OrganizationUser and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // to ensure "contactEmail" is required (not null)
            if (contactEmail == null)
            {
                throw new InvalidDataException("contactEmail is a required property for OrganizationUser and cannot be null");
            }
            else
            {
                this.ContactEmail = contactEmail;
            }
            this.About = about;
            this.ZipCode = zipCode;
            this.ContactName = contactName;
            this.ContactPhone = contactPhone;
            this.WebSite = webSite;
            this.WorkSector = workSector;
            this.User = user;
        }
        
        /// <summary>
        /// Organization&#x27;s name
        /// </summary>
        /// <value>Organization&#x27;s name</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Organization overview
        /// </summary>
        /// <value>Organization overview</value>
        [DataMember(Name="about", EmitDefaultValue=false)]
        public string About { get; set; }

        /// <summary>
        /// Zip code where the organization is located
        /// </summary>
        /// <value>Zip code where the organization is located</value>
        [DataMember(Name="zip_code", EmitDefaultValue=false)]
        public long? ZipCode { get; set; }

        /// <summary>
        /// Contact person&#x27;s name
        /// </summary>
        /// <value>Contact person&#x27;s name</value>
        [DataMember(Name="contact_name", EmitDefaultValue=false)]
        public string ContactName { get; set; }

        /// <summary>
        /// Contact person&#x27;s phone
        /// </summary>
        /// <value>Contact person&#x27;s phone</value>
        [DataMember(Name="contact_phone", EmitDefaultValue=false)]
        public string ContactPhone { get; set; }

        /// <summary>
        /// Contact person&#x27;s email
        /// </summary>
        /// <value>Contact person&#x27;s email</value>
        [DataMember(Name="contact_email", EmitDefaultValue=false)]
        public string ContactEmail { get; set; }

        /// <summary>
        /// Organization&#x27;s web site
        /// </summary>
        /// <value>Organization&#x27;s web site</value>
        [DataMember(Name="web_site", EmitDefaultValue=false)]
        public string WebSite { get; set; }

        /// <summary>
        /// Gets or Sets WorkSector
        /// </summary>
        [DataMember(Name="work_sector", EmitDefaultValue=false)]
        public Sector WorkSector { get; set; }

        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [DataMember(Name="user", EmitDefaultValue=false)]
        public User User { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrganizationUser {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  About: ").Append(About).Append("\n");
            sb.Append("  ZipCode: ").Append(ZipCode).Append("\n");
            sb.Append("  ContactName: ").Append(ContactName).Append("\n");
            sb.Append("  ContactPhone: ").Append(ContactPhone).Append("\n");
            sb.Append("  ContactEmail: ").Append(ContactEmail).Append("\n");
            sb.Append("  WebSite: ").Append(WebSite).Append("\n");
            sb.Append("  WorkSector: ").Append(WorkSector).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrganizationUser);
        }

        /// <summary>
        /// Returns true if OrganizationUser instances are equal
        /// </summary>
        /// <param name="input">Instance of OrganizationUser to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrganizationUser input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.About == input.About ||
                    (this.About != null &&
                    this.About.Equals(input.About))
                ) && 
                (
                    this.ZipCode == input.ZipCode ||
                    (this.ZipCode != null &&
                    this.ZipCode.Equals(input.ZipCode))
                ) && 
                (
                    this.ContactName == input.ContactName ||
                    (this.ContactName != null &&
                    this.ContactName.Equals(input.ContactName))
                ) && 
                (
                    this.ContactPhone == input.ContactPhone ||
                    (this.ContactPhone != null &&
                    this.ContactPhone.Equals(input.ContactPhone))
                ) && 
                (
                    this.ContactEmail == input.ContactEmail ||
                    (this.ContactEmail != null &&
                    this.ContactEmail.Equals(input.ContactEmail))
                ) && 
                (
                    this.WebSite == input.WebSite ||
                    (this.WebSite != null &&
                    this.WebSite.Equals(input.WebSite))
                ) && 
                (
                    this.WorkSector == input.WorkSector ||
                    (this.WorkSector != null &&
                    this.WorkSector.Equals(input.WorkSector))
                ) && 
                (
                    this.User == input.User ||
                    (this.User != null &&
                    this.User.Equals(input.User))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.About != null)
                    hashCode = hashCode * 59 + this.About.GetHashCode();
                if (this.ZipCode != null)
                    hashCode = hashCode * 59 + this.ZipCode.GetHashCode();
                if (this.ContactName != null)
                    hashCode = hashCode * 59 + this.ContactName.GetHashCode();
                if (this.ContactPhone != null)
                    hashCode = hashCode * 59 + this.ContactPhone.GetHashCode();
                if (this.ContactEmail != null)
                    hashCode = hashCode * 59 + this.ContactEmail.GetHashCode();
                if (this.WebSite != null)
                    hashCode = hashCode * 59 + this.WebSite.GetHashCode();
                if (this.WorkSector != null)
                    hashCode = hashCode * 59 + this.WorkSector.GetHashCode();
                if (this.User != null)
                    hashCode = hashCode * 59 + this.User.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
