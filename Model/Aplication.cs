/* 
 * Employex
 *
 * This is a sample API that allows to manage Employex system, which serves for users seeking to apply for job offers. 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: ricardorzan@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Employex.Client.SwaggerDateConverter;

namespace Employex.Model
{
    /// <summary>
    /// Aplication in a job offer from an independient user
    /// </summary>
    [DataContract]
        public partial class Aplication :  IEquatable<Aplication>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Aplication" /> class.
        /// </summary>
        /// <param name="date">Date on which was applied for the job (required).</param>
        /// <param name="aproved">Flah to know if the aplication was aproved or not (required) (default to false).</param>
        /// <param name="independientUserId">From who is the aplication.</param>
        /// <param name="jobOfferId">Job offer&#x27;s id.</param>
        public Aplication(DateTime? date = default(DateTime?), bool? aproved = false, Guid? independientUserId = default(Guid?), Guid? jobOfferId = default(Guid?))
        {
            // to ensure "date" is required (not null)
            if (date == null)
            {
                throw new InvalidDataException("date is a required property for Aplication and cannot be null");
            }
            else
            {
                this.Date = date;
            }
            // to ensure "aproved" is required (not null)
            if (aproved == null)
            {
                throw new InvalidDataException("aproved is a required property for Aplication and cannot be null");
            }
            else
            {
                this.Aproved = aproved;
            }
            this.IndependientUserId = independientUserId;
            this.JobOfferId = jobOfferId;
        }
        
        /// <summary>
        /// Date on which was applied for the job
        /// </summary>
        /// <value>Date on which was applied for the job</value>
        [DataMember(Name="date", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? Date { get; set; }

        /// <summary>
        /// Flah to know if the aplication was aproved or not
        /// </summary>
        /// <value>Flah to know if the aplication was aproved or not</value>
        [DataMember(Name="aproved", EmitDefaultValue=false)]
        public bool? Aproved { get; set; }

        /// <summary>
        /// From who is the aplication
        /// </summary>
        /// <value>From who is the aplication</value>
        [DataMember(Name="independient_user_id", EmitDefaultValue=false)]
        public Guid? IndependientUserId { get; set; }

        /// <summary>
        /// Job offer&#x27;s id
        /// </summary>
        /// <value>Job offer&#x27;s id</value>
        [DataMember(Name="job_offer_id", EmitDefaultValue=false)]
        public Guid? JobOfferId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Aplication {\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  Aproved: ").Append(Aproved).Append("\n");
            sb.Append("  IndependientUserId: ").Append(IndependientUserId).Append("\n");
            sb.Append("  JobOfferId: ").Append(JobOfferId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Aplication);
        }

        /// <summary>
        /// Returns true if Aplication instances are equal
        /// </summary>
        /// <param name="input">Instance of Aplication to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Aplication input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.Aproved == input.Aproved ||
                    (this.Aproved != null &&
                    this.Aproved.Equals(input.Aproved))
                ) && 
                (
                    this.IndependientUserId == input.IndependientUserId ||
                    (this.IndependientUserId != null &&
                    this.IndependientUserId.Equals(input.IndependientUserId))
                ) && 
                (
                    this.JobOfferId == input.JobOfferId ||
                    (this.JobOfferId != null &&
                    this.JobOfferId.Equals(input.JobOfferId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Date != null)
                    hashCode = hashCode * 59 + this.Date.GetHashCode();
                if (this.Aproved != null)
                    hashCode = hashCode * 59 + this.Aproved.GetHashCode();
                if (this.IndependientUserId != null)
                    hashCode = hashCode * 59 + this.IndependientUserId.GetHashCode();
                if (this.JobOfferId != null)
                    hashCode = hashCode * 59 + this.JobOfferId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
