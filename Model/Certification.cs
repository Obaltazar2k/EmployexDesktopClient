/* 
 * Employex
 *
 * This is a sample API that allows to manage Employex system, which serves for users seeking to apply for job offers. 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: ricardorzan@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Employex.Client.SwaggerDateConverter;

namespace Employex.Model
{
    /// <summary>
    /// Main structure of a certification object
    /// </summary>
    [DataContract]
        public partial class Certification :  IEquatable<Certification>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Certification" /> class.
        /// </summary>
        /// <param name="credentialId">Unique identifier of certification.</param>
        /// <param name="credentialUrl">Certification&#x27;s url.</param>
        /// <param name="issuingCompany">Certification issuing company (required).</param>
        /// <param name="expirationDate">Date the certification expires.</param>
        /// <param name="expeditionDate">Date the certification was issued.</param>
        /// <param name="title">Title of the certification taken (required).</param>
        public Certification(Guid? credentialId = default(Guid?), string credentialUrl = default(string), string issuingCompany = default(string), DateTime? expirationDate = default(DateTime?), DateTime? expeditionDate = default(DateTime?), string title = default(string))
        {
            // to ensure "issuingCompany" is required (not null)
            if (issuingCompany == null)
            {
                throw new InvalidDataException("issuingCompany is a required property for Certification and cannot be null");
            }
            else
            {
                this.IssuingCompany = issuingCompany;
            }
            // to ensure "title" is required (not null)
            if (title == null)
            {
                throw new InvalidDataException("title is a required property for Certification and cannot be null");
            }
            else
            {
                this.Title = title;
            }
            this.CredentialId = credentialId;
            this.CredentialUrl = credentialUrl;
            this.ExpirationDate = expirationDate;
            this.ExpeditionDate = expeditionDate;
        }
        
        /// <summary>
        /// Unique identifier of certification
        /// </summary>
        /// <value>Unique identifier of certification</value>
        [DataMember(Name="credential_id", EmitDefaultValue=false)]
        public Guid? CredentialId { get; set; }

        /// <summary>
        /// Certification&#x27;s url
        /// </summary>
        /// <value>Certification&#x27;s url</value>
        [DataMember(Name="credential_url", EmitDefaultValue=false)]
        public string CredentialUrl { get; set; }

        /// <summary>
        /// Certification issuing company
        /// </summary>
        /// <value>Certification issuing company</value>
        [DataMember(Name="issuing_company", EmitDefaultValue=false)]
        public string IssuingCompany { get; set; }

        /// <summary>
        /// Date the certification expires
        /// </summary>
        /// <value>Date the certification expires</value>
        [DataMember(Name="expiration_date", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? ExpirationDate { get; set; }

        /// <summary>
        /// Date the certification was issued
        /// </summary>
        /// <value>Date the certification was issued</value>
        [DataMember(Name="expedition_date", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? ExpeditionDate { get; set; }

        /// <summary>
        /// Title of the certification taken
        /// </summary>
        /// <value>Title of the certification taken</value>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Certification {\n");
            sb.Append("  CredentialId: ").Append(CredentialId).Append("\n");
            sb.Append("  CredentialUrl: ").Append(CredentialUrl).Append("\n");
            sb.Append("  IssuingCompany: ").Append(IssuingCompany).Append("\n");
            sb.Append("  ExpirationDate: ").Append(ExpirationDate).Append("\n");
            sb.Append("  ExpeditionDate: ").Append(ExpeditionDate).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Certification);
        }

        /// <summary>
        /// Returns true if Certification instances are equal
        /// </summary>
        /// <param name="input">Instance of Certification to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Certification input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CredentialId == input.CredentialId ||
                    (this.CredentialId != null &&
                    this.CredentialId.Equals(input.CredentialId))
                ) && 
                (
                    this.CredentialUrl == input.CredentialUrl ||
                    (this.CredentialUrl != null &&
                    this.CredentialUrl.Equals(input.CredentialUrl))
                ) && 
                (
                    this.IssuingCompany == input.IssuingCompany ||
                    (this.IssuingCompany != null &&
                    this.IssuingCompany.Equals(input.IssuingCompany))
                ) && 
                (
                    this.ExpirationDate == input.ExpirationDate ||
                    (this.ExpirationDate != null &&
                    this.ExpirationDate.Equals(input.ExpirationDate))
                ) && 
                (
                    this.ExpeditionDate == input.ExpeditionDate ||
                    (this.ExpeditionDate != null &&
                    this.ExpeditionDate.Equals(input.ExpeditionDate))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CredentialId != null)
                    hashCode = hashCode * 59 + this.CredentialId.GetHashCode();
                if (this.CredentialUrl != null)
                    hashCode = hashCode * 59 + this.CredentialUrl.GetHashCode();
                if (this.IssuingCompany != null)
                    hashCode = hashCode * 59 + this.IssuingCompany.GetHashCode();
                if (this.ExpirationDate != null)
                    hashCode = hashCode * 59 + this.ExpirationDate.GetHashCode();
                if (this.ExpeditionDate != null)
                    hashCode = hashCode * 59 + this.ExpeditionDate.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
